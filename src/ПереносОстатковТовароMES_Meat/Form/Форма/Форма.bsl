
&НаСервере
// +++ Процедура. Сергеев Андрей. 05.05.2021
//
// Параметры:
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьПараметрыПоУмолчанию();
	
	//ТаблицаВыбраныхСоглашений.Очистить();
	ТаблицаВыбранныхСкладов.Очистить();
	//СписокСоглашений.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",ТаблицаВыбраныхСоглашений);
	СписокСкладов.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",ТаблицаВыбранныхСкладов);

	//СписокСоглашений.Параметры.УстановитьЗначениеПараметра("ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСоглашений,"Подразделение",Справочники.СтруктураПредприятия.НайтиПоНаименованию("Магазин Москва 1"),ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	

КонецПроцедуры


&НаКлиенте
// +++ Процедура.  02.04.2021
//
// Параметры:
//
Процедура КнопкаНажатиеТестПодключения(Команда)
	
	// Тест ERP
	ПараметрыПодключения = Новый Структура("АдресВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ",
		АдресСервераERP,
		ПользовательERP,
		ПарольERP);
		
	Если ЕстьПодключениеИБСервер(ПараметрыПодключения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Подключение к базе ERP успешно");
	КонецЕсли;
			
КонецПроцедуры






///////////////////////////////////////////////////////////////////////////////////////////////
// 

#Область Прочее

&НаСервере
// +++ Функция.  02.04.2021
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ЕстьПодключениеИБСервер(Параметры) 
	
	Адрес        = Параметры.АдресВнешнейИБ;
	Пользователь = Параметры.ПользовательВнешнейИБ;
	Пароль       = Параметры.ПарольВнешнейИБ;
	
	Определения = Новый WSОпределения(Адрес, Пользователь, Пароль); 
	
	Прокси = Новый WSПрокси(Определения, "SyncERP", "SyncERP", "SyncERP" + "Soap",,, );
	Прокси.Пользователь	= Пользователь;
	Прокси.Пароль		= Пароль;
	
	Возврат Прокси.Тест();
	
КонецФункции

&НаСервере
// +++ Процедура.  03.04.2021
//
// Параметры:
//
Процедура ЗаполнитьПараметрыПоУмолчанию()
	
	АдресСервераERP     = "http://localhost/MesDev1Bit/ws/SyncERP?wsdl";
	ПользовательERP     = "СкибинВВ";
	ПарольERP           = "3618";
	
	ИмяСервераSQL    = "matts02";
	ИмяСтаройБазыERP = "splav_erp";
	ИмяНовойБазыERP  = "splav_erp_new";
	ПользовательSQL  = "User1C";
	ПарольSQL        = "";
	
	ИмяХарактеристикиБезРазмера = "OneSize";
		
КонецПроцедуры	



#КонецОбласти

#Область ПереносОстатков

//&НаКлиенте &НаСервере
// +++ Процедура. Громов Алексей. 19.05.2021
//
// Параметры:
//


#КонецОбласти


#Область РаботаСОСписком

&НаКлиенте
Процедура СписокСкладовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ОбработкаВыбора(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбора(ВыбраннаяСтрока)
	
	ПарОтбора	= Новый Структура("Ссылка",ВыбраннаяСтрока.Ссылка);
	мИндекс	= ТаблицаВыбранныхСкладов.НайтиСтроки(ПарОтбора);
	
	Если мИндекс.Количество()=0 Тогда
		стрВыб=  ТаблицаВыбранныхСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрВыб,ВыбраннаяСтрока);
	Иначе
		ТаблицаВыбранныхСкладов.Удалить(мИндекс[0]);
	КонецЕсли;
	МассивОтобраных=Новый Массив ;
	
	Если  ТаблицаВыбранныхСкладов.Количество()<>0 тогда
		Для каждого СтрокаТЗ Из ТаблицаВыбранныхСкладов Цикл
			
			МассивОтобраных.Добавить( СтрокаТЗ.Ссылка);
			
		КонецЦикла;  
	КонецЕсли;
	СписокСкладов.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",МассивОтобраных);
	//ркКоличествоВыбранных=ВыбраныеДанные.Количество();
	
КонецПроцедуры


//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	ТаблицаВыбраныхСкладов.Очистить();
//	
//	СписокСкладов.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",ТаблицаВыбраныхСкладов);
//	
//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСкладов,"Подразделение",Справочники.СтруктураПредприятия.НайтиПоНаименованию("Магазин Москва 1"),ВидСравненияКомпоновкиДанных.Равно,,Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
//	
//КонецПроцедуры


&НаСервере
Процедура ВыделитьВсеНаСервере()
	ТаблицаВыбранныхСкладов.Очистить();
	ТаблицаИзСписка	= СписокВТЗнаСервере();
	
	Для каждого СтрокаСписка Из ТаблицаИзСписка Цикл
		СтруктураРеквизитов	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСписка.Ссылка,"ПометкаУдаления,ЭтоГруппа");
		
		ЕСли Не СтруктураРеквизитов.ПометкаУдаления и Не СтруктураРеквизитов.ЭтоГруппа Тогда	
			стрВыб=  ТаблицаВыбранныхСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрВыб,СтрокаСписка);
		КонецЕсли;	
	КонецЦикла; 
	
	
	МассивОтобраных=Новый Массив ;
	Если  ТаблицаВыбранныхСкладов.Количество()<>0 тогда
		Для каждого СтрокаТЗ Из ТаблицаВыбранныхСкладов Цикл
			
			МассивОтобраных.Добавить( СтрокаТЗ.Ссылка);
			
		КонецЦикла;  
	КонецЕсли;
	СписокСкладов.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",МассивОтобраных);
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ВыделитьВсе(Команда)
	ВыделитьВсеНаСервере();
КонецПроцедуры


&НаСервере
Процедура СнятьВсеНаСервере()
	ТаблицаВыбранныхСкладов.Очистить();
	
	
	МассивОтобраных=Новый Массив ;
	СписокСкладов.Параметры.УстановитьЗначениеПараметра("МассивОтобраных",МассивОтобраных);
	
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсе(Команда)
	СнятьВсеНаСервере();
КонецПроцедуры

//Преобразует динамический список в таблицу значений с учетом отборов списка 
&НаСервере
Функция СписокВТЗнаСервере()
	
	Схема = Элементы.СписокСкладов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокСкладов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Возврат  ТаблицаРезультат;
КонецФункции







#КонецОбласти


&НаСервере
Функция ПолучитьНаборыНаСервере()
	ТзВозвратаПустая	= Новый ТаблицаЗначений;
	
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
		
	ПараметрыНастройки = Новый Структура("АдресСервераERP, ПользовательERP, ПарольERP,  ИмяСервераSQL, ИмяСтаройБазыERP, ИмяНовойБазыERP, ПользовательSQL, ПарольSQL, ИмяХарактеристикиБезРазмера",
		АдресСервераERP,
		ПользовательERP,
		ПарольERP,
		ИмяСервераSQL,
		ИмяСтаройБазыERP,
		ИмяНовойБазыERP,
		ПользовательSQL,
		ПарольSQL,
		ИмяХарактеристикиБезРазмера);
		
	Результат = ЗначениеОбъект.ПолучитьНаборыДопов(ПараметрыНастройки);
	
	
	
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	  КС = Новый КвалификаторыСтроки(150);
		Массив = Новый Массив;
		Массив.Очистить();
		Массив.Добавить(Тип("Строка"));
		ТипС=Новый ОписаниеТипов(Массив,КС);
		
Результат.Колонки.Добавить("ИмяПредопределенныхДанныхСтрокой",ТипС);

	Для Каждого СтрокаРезультата из Результат Цикл
		
		    СтрокаРезультата.ИмяПредопределенныхДанныхСтрокой	= Строка(СтрокаРезультата.ИмяПредопределенныхДанных);
	КонецЦикла;
	
	
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
		|	НаборыДополнительныхРеквизитовИСведений.ВерсияДанных КАК ВерсияДанных,
		|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления КАК ПометкаУдаления,
		|	НаборыДополнительныхРеквизитовИСведений.Родитель КАК Родитель,
		|	НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа КАК ЭтоГруппа,
		|	НаборыДополнительныхРеквизитовИСведений.Наименование КАК Наименование,
		|	НаборыДополнительныхРеквизитовИСведений.КоличествоРеквизитов КАК КоличествоРеквизитов,
		|	НаборыДополнительныхРеквизитовИСведений.КоличествоСведений КАК КоличествоСведений,
		|	НаборыДополнительныхРеквизитовИСведений.Используется КАК Используется,
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора,
		|	НаборыДополнительныхРеквизитовИСведений.Предопределенный КАК Предопределенный,
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	 Резпромежуточный	= Новый ТаблицаЗначений;
	 
	 Резпромежуточный= РезультатЗапроса.Выгрузить().СкопироватьКолонки();
	 
	 КС = Новый КвалификаторыСтроки(150);
		Массив = Новый Массив;
		Массив.Очистить();
		Массив.Добавить(Тип("Строка"));
		ТипС=Новый ОписаниеТипов(Массив,КС);
		
Резпромежуточный.Колонки.Добавить("ИмяПредопределенныхДанныхСтрокой",ТипС);

	 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 НоваяСтрокаРез	= Резпромежуточный.Добавить();
		 ЗаполнитьЗначенияСвойств(НоваяСтрокаРез,ВыборкаДетальныеЗаписи);
		  НоваяСтрокаРез.ИмяПредопределенныхДанныхСтрокой	=  Строка(ВыборкаДетальныеЗаписи.ИмяПредопределенныхДанных);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеИзДругойБазы.Ссылка КАК Ссылка,
	|	ДанныеИзДругойБазы.Родитель КАК Родитель,
	|	ДанныеИзДругойБазы.GUIDНабора КАК GUIDНабора,
	|	ДанныеИзДругойБазы.GUIDРодительНабора КАК GUIDРодительНабора,
	|	ДанныеИзДругойБазы.Используется КАК Используется,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеИзДругойБазы.ИмяПредопределенныхДанных) КАК ИмяПредопределенныхДанных,
	|	ДанныеИзДругойБазы.Предопределенный КАК Предопределенный,
	|	ДанныеИзДругойБазы.Наименование КАК Наименование,
	|	ДанныеИзДругойБазы.ЭтоГруппа КАК ЭтоГруппа,
	|	ДанныеИзДругойБазы.ИмяПредопределенныхДанныхСтрокой КАК ИмяПредопределенныхДанныхСтрокой
	|ПОМЕСТИТЬ ВТВходящие
	|ИЗ
	|	&ДанныеИзДругойБазы КАК ДанныеИзДругойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Промежуточная.Ссылка КАК Ссылка,
	|	Промежуточная.ВерсияДанных КАК ВерсияДанных,
	|	Промежуточная.ПометкаУдаления КАК ПометкаУдаления,
	|	Промежуточная.Родитель КАК Родитель,
	|	Промежуточная.ЭтоГруппа КАК ЭтоГруппа,
	|	Промежуточная.Наименование КАК Наименование,
	|	Промежуточная.КоличествоРеквизитов КАК КоличествоРеквизитов,
	|	Промежуточная.КоличествоСведений КАК КоличествоСведений,
	|	Промежуточная.Используется КАК Используется,
	|	Промежуточная.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора,
	|	Промежуточная.Предопределенный КАК Предопределенный,
	|	Промежуточная.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	Промежуточная.ИмяПредопределенныхДанныхСтрокой КАК ИмяПредопределенныхДанныхСтрокой
	|ПОМЕСТИТЬ ВТСименемСтрокой
	|ИЗ
	|	&Промежуточная КАК Промежуточная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВходящие.Ссылка КАК Ссылка,
	|	ВТВходящие.Родитель КАК Родитель,
	|	ВТВходящие.GUIDНабора КАК GUIDНабора,
	|	ВТВходящие.GUIDРодительНабора КАК GUIDРодительНабора,
	|	ВТВходящие.Используется КАК Используется,
	|	ВТВходящие.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВТВходящие.Предопределенный КАК Предопределенный,
	|	ВТВходящие.Наименование КАК Наименование,
	|	ВТВходящие.ЭтоГруппа КАК ЭтоГруппа2,
	|	ВТСименемСтрокой.Ссылка КАК Ссылка1,
	|	ВТСименемСтрокой.ВерсияДанных КАК ВерсияДанных,
	|	ВТСименемСтрокой.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТСименемСтрокой.Родитель КАК Родитель1,
	|	ВТСименемСтрокой.ЭтоГруппа КАК ЭтоГруппа,
	|	ВТСименемСтрокой.Наименование КАК Наименование1,
	|	ВТСименемСтрокой.КоличествоРеквизитов КАК КоличествоРеквизитов,
	|	ВТСименемСтрокой.КоличествоСведений КАК КоличествоСведений,
	|	ВТСименемСтрокой.Используется КАК Используется1,
	|	ВТСименемСтрокой.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора,
	|	ВТСименемСтрокой.Предопределенный КАК Предопределенный1,
	|	ВТСименемСтрокой.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных1,
	|	ВТСименемСтрокой.ИмяПредопределенныхДанныхСтрокой КАК ИмяПредопределенныхДанныхСтрокой
	|ИЗ
	|	ВТВходящие КАК ВТВходящие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСименемСтрокой КАК ВТСименемСтрокой
	|		ПО ВТВходящие.ИмяПредопределенныхДанныхСтрокой = ВТСименемСтрокой.ИмяПредопределенныхДанных";
	

	//	"ВЫБРАТЬ
	//	|	ДанныеИзДругойБазы.Ссылка КАК Ссылка,
	//	|	ДанныеИзДругойБазы.Родитель КАК Родитель,
	//	|	ДанныеИзДругойБазы.GUIDНабора КАК GUIDНабора,
	//	|	ДанныеИзДругойБазы.GUIDРодительНабора КАК GUIDРодительНабора,
	//	|	ДанныеИзДругойБазы.Используется КАК Используется,
	//	|	ДанныеИзДругойБазы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	//	|	ДанныеИзДругойБазы.Предопределенный КАК Предопределенный,
	//	|	ДанныеИзДругойБазы.Наименование КАК Наименование,
	//	|	ДанныеИзДругойБазы.ЭтоГруппа КАК ЭтоГруппа
	//	|ПОМЕСТИТЬ ВТВходящие
	//	|ИЗ
	//	|	&ДанныеИзДругойБазы КАК ДанныеИзДругойБазы
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТВходящие.Ссылка КАК Ссылка,
	//	|	ВТВходящие.Родитель КАК Родитель,
	//	|	ВТВходящие.GUIDНабора КАК GUIDНабора,
	//	|	ВТВходящие.GUIDРодительНабора КАК GUIDРодительНабора,
	//	|	ВТВходящие.Используется КАК Используется,
	//	|	ВТВходящие.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	//	|	ВТВходящие.Предопределенный КАК Предопределенный,
	//	|	ВТВходящие.Наименование КАК Наименование,
	//	|	ВТВходящие.ЭтоГруппа КАК ЭтоГруппа,
	//	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка1,
	//	|	НаборыДополнительныхРеквизитовИСведений.ВерсияДанных КАК ВерсияДанных,
	//	|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления КАК ПометкаУдаления,
	//	|	НаборыДополнительныхРеквизитовИСведений.Родитель КАК Родитель1,
	//	|	НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа КАК ЭтоГруппа1,
	//	|	НаборыДополнительныхРеквизитовИСведений.Наименование КАК Наименование1,
	//	|	НаборыДополнительныхРеквизитовИСведений.КоличествоРеквизитов КАК КоличествоРеквизитов,
	//	|	НаборыДополнительныхРеквизитовИСведений.КоличествоСведений КАК КоличествоСведений,
	//	|	НаборыДополнительныхРеквизитовИСведений.Используется КАК Используется1,
	//	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора КАК ИмяПредопределенногоНабора,
	//	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный КАК Предопределенный1,
	//	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных1,
	//	|	НаборыДополнительныхРеквизитовИСведений.Представление КАК Представление
	//	|ИЗ
	//	|	ВТВходящие КАК ВТВходящие
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	//	|		ПО ВТВходящие.Наименование = НаборыДополнительныхРеквизитовИСведений.Наименование
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ВТВходящие.Ссылка,
	//	|	ВТВходящие.Родитель,
	//	|	ВТВходящие.GUIDНабора,
	//	|	ВТВходящие.GUIDРодительНабора,
	//	|	ВТВходящие.Используется,
	//	|	ВТВходящие.ИмяПредопределенныхДанных,
	//	|	ВТВходящие.Предопределенный,
	//	|	ВТВходящие.Наименование,
	//	|	ВТВходящие.ЭтоГруппа,
	//	|	НаборыДополнительныхРеквизитовИСведений.Ссылка,
	//	|	НаборыДополнительныхРеквизитовИСведений.ВерсияДанных,
	//	|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления,
	//	|	НаборыДополнительныхРеквизитовИСведений.Родитель,
	//	|	НаборыДополнительныхРеквизитовИСведений.ЭтоГруппа,
	//	|	НаборыДополнительныхРеквизитовИСведений.Наименование,
	//	|	НаборыДополнительныхРеквизитовИСведений.КоличествоРеквизитов,
	//	|	НаборыДополнительныхРеквизитовИСведений.КоличествоСведений,
	//	|	НаборыДополнительныхРеквизитовИСведений.Используется,
	//	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора,
	//	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный,
	//	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных,
	//	|	NULL
	//	|ИЗ
	//	|	ВТВходящие КАК ВТВходящие
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	//	|		ПО ВТВходящие.ИмяПредопределенныхДанных = НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора";
	//
	Запрос.УстановитьПараметр("ДанныеИзДругойБазы",Результат);
	Запрос.УстановитьПараметр("Промежуточная",Резпромежуточный);

	РезультатЗапроса = Запрос.Выполнить();
	 Проверка	=  РезультатЗапроса.Выгрузить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если  XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка1)= ВыборкаДетальныеЗаписи.GUIDНабора тогда
			Продолжить;
		КонецЕсли;
		КешОбъектаВнутри	=  ВыборкаДетальныеЗаписи.Ссылка1.ПолучитьОбъект();
		Если  КешОбъектаВнутри.ЭтоГруппа тогда
			  СправочникНовыйНабор	= Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьГруппу();
		 Иначе
		СправочникНовыйНабор	= Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
		КонецЕсли;
		СправочникНовыйНабор.УстановитьСсылкуНового(Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(ВыборкаДетальныеЗаписи.GUIDНабора))) );
		
		Если  КешОбъектаВнутри.ЭтоГруппа тогда
			 ЗаполнитьЗначенияСвойств( СправочникНовыйНабор,КешОбъектаВнутри,,"Владелец,КоличествоРеквизитов,КоличествоСведений");
			Иначе
		ЗаполнитьЗначенияСвойств( СправочникНовыйНабор,КешОбъектаВнутри,,"Владелец");
		КонецЕсли;
		СправочникНовыйНабор.ОбменДанными.Загрузка	= истина;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.GUIDРодительНабора) тогда
		СправочникНовыйНабор.Родитель	=  Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка(ВыборкаДетальныеЗаписи.GUIDРодительНабора))) 
		КонецЕсли;
		
		СправочникНовыйНабор.Записать(); 
		
		СсылкаНаСправочникВнутри	=  ВыборкаДетальныеЗаписи.Ссылка1.ПолучитьОбъект();

		//Помечаем данные на удаление из базы
		 //СсылкаНаСправочникВнутри.Предопределенный	= Ложь;  ВыборкаДетальныеЗаписи.Наименование1
		 СсылкаНаСправочникВнутри.ПометкаУдаления	= Истина;
		 СсылкаНаСправочникВнутри.ОбменДанными.Загрузка	= истина;
		 //СсылкаНаСправочникВнутри.Записать();
		 СсылкаНаСправочникВнутри.ИмяПредопределенныхДанных	= "";
	СсылкаНаСправочникВнутри.Записать();
СсылкаНаСправочникВнутри.Удалить();

		 //Возврат истина;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ПолучитьНаборы(Команда)
	ПолучитьНаборыНаСервере();
КонецПроцедуры

#Область фоновоеВыполнение
&НаКлиенте
Процедура ЗагрузитьОстаткиМесВФоне()
	//БазаОле = новый COMОбъект("V77.Application");
	//Рез = БазаОле.Initialize(БазаОле.RMTrade,"/D""\\TS12\bases\Real\"" /nОбменСКПК /p357","NO_SPLASH_SHOW");
	СтруктураОбъекта = новый Структура("ТабЗн", ТаблицаВыбранныхСкладов);
	//СтруктураОбъекта.Вставить("КомОбъект", БазаОле);
	
	ФоновоеЗадание = ВыполнитьФоновоеЗаданиеНаСервере();//ПоместитьВоВременноеХранилище(СтруктураОбъекта, Новый УникальныйИдентификатор()));
	ИдентификаторФЗадания = ФоновоеЗадание.ИдентификаторЗадания;
	АдресРезультата = ФоновоеЗадание.АдресРезультата;
	ПодключитьОбработчикОжидания("ФоновоеЗаданиеОбработчик",1,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеОбработчик() Экспорт
	ЗавершениеЗадания = ЗаданиеВыполнено();
	Выполнение = ПрочитатьПрогресс(); 
	Если ЗавершениеЗадания тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеОбработчик");
		ХодВыполнения = "Завершено";
		ПолучениеРезультата();
	ИначеЕсли Выполнение <> Неопределено тогда
		ХодВыполнения = Выполнение.Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьПрогресс()
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторФЗадания);
КонецФункции

&НаСервере
Функция ЗаданиеВыполнено()
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФЗадания);
КонецФункции


&НаСервере
Процедура ПолучениеРезультата()
	Структура = ПолучитьИзВременногоХранилища(АдресРезультата);
	ТабЗн = Структура.ТЗВозврата;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Тест Пройденн");

	//Объект.Продукция.Загрузить(ТабЗн);
	//ЗаполнитьПартии(ТабЗн);
	//РасчетСырья();
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере() //СтруктураОбъекта)
	
	СтруктураПараметров = Новый Структура();
	
	//СтруктураПараметров.Вставить("ПериодЗапроса", Объект.ПериодЗапроса);
	//СтруктураПараметров.Вставить("НакладнаяНомер", НакладнаяНомер);
	//СтруктураПараметров.Вставить("МаршрутСписок", МаршрутСписок);
	//СтруктураПараметров.Вставить("ПовторитьЗагрузкуНакладных", ПовторитьЗагрузкуНакладных);
	
	СтруктураОбъекта = новый Структура("ТабЗн", ТаблицаВыбранныхСкладов.Выгрузить());
	СтруктураПараметров.Вставить("СтруктураОбъекта", СтруктураОбъекта);
	
	НаименованиеЗадания = НСтр("ru = 'Длительная операция внешней обработки'");
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", "Формирование таблицы");
	ПараметрыЗадания.Вставить("ИмяМетода", "ВыгрузитьОстаткиПоВыбраннымСкладам");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", СтруктураПараметров);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Истина);
	ПараметрыЗадания.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	//ПараметрыЗадания.Вставить("КоличествоСекунд", 100);

	
	//ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка",Неопределено);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка", Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию("Перенос остатков отвесов MES"));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат РезультатФоновогоЗадания;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОстаткиМес(Команда)
	ЗагрузитьОстаткиМесВФоне();
КонецПроцедуры

#КонецОбласти

