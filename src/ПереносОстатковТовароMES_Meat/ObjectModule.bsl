
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура();
	РегистрационныеДанные.Вставить("Наименование", "Перенос остатков отвесов MES");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "v 1.1");
	РегистрационныеДанные.Вставить("Информация", "v 1.1");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Идентификатор");
	тз.Колонки.Добавить("Использование");
	тз.Колонки.Добавить("Представление");
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.Идентификатор = "Перенос остатков отвесов MES";
	НоваяСтрока.Использование = "ОткрытиеФормы";
	НоваяСтрока.Представление = "Перенос остатков отвесов MES";
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.Идентификатор = "Перенос остатков отвесов MES сервис";
	НоваяСтрока.Использование = "ВызовСерверногоМетода";
	НоваяСтрока.Представление = "Перенос остатков отвесов MES сервис";
	
	
	РегистрационныеДанные.Вставить("Команды", тз);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

&НаСервере
Процедура  ВыгрузитьОстаткиПоВыбраннымСкладам(СтруктураПараметров, АдресХранилища) Экспорт
	 	//ПериодЗапроса = СтруктураПараметров.ПериодЗапроса;
	//НакладнаяНомер = СтруктураПараметров.НакладнаяНомер;
	//МаршрутСписок = СтруктураПараметров.МаршрутСписок;
	//ПовторитьЗагрузкуНакладных = СтруктураПараметров.ПовторитьЗагрузкуНакладных;
	//БазаОле = ПолучитьИзВременногоХранилища(СтруктураПараметров.СтруктураОбъекта.КомОбъект);
	ТабЗн = СтруктураПараметров.СтруктураОбъекта.ТабЗн;
	
	Описание = "Соединение с 1с 7.7";
	ДлительныеОперации.СообщитьПрогресс(0, Описание);

		ТЗВозврата = ОбработатьЗагрузку(ТабЗн);
	
	Описание = "Передаём данные";
	ДлительныеОперации.СообщитьПрогресс(100, Описание);
	
	ПоместитьВоВременноеХранилище(Новый Структура("Сообщение,КодПоЗавершению, ТЗВозврата","завершена","Ничего();",ТЗВозврата),АдресХранилища);
	//БазаОле = "";
КонецПроцедуры


Функция ОбработатьЗагрузку(МассивТаблица)
	
	ТабЗн = новый ТаблицаЗначений;
	ТабЗн.Колонки.Добавить("НомерТТН");
	ТабЗн.Колонки.Добавить("ДатаТТН");
	ТабЗн.Колонки.Добавить("Маршрут");
	ТабЗн.Колонки.Добавить("Контрагент");
	ТабЗн.Колонки.Добавить("Предприятие");
	ТабЗн.Колонки.Добавить("НоменклатураУчетнойСистемы");
	ТабЗн.Колонки.Добавить("Продукция");
	ТабЗн.Колонки.Добавить("Количество",новый ОписаниеТипов("Число"));
	ТабЗн.Колонки.Добавить("Автомобиль");
	
	Описание = "Формируем таблицу";
	ДлительныеОперации.СообщитьПрогресс(0, Описание);
	инд = 1;
	ОбщнееКолл =  МассивТаблица.Количество();
	Для каждого ЭлемМассива Из МассивТаблица Цикл
		Описание = Строка(ЭлемМассива.Ссылка) + " Загружаем";
		ДлительныеОперации.СообщитьПрогресс(Окр(инд/ОбщнееКолл,0,1), Описание);
		инд = инд + 1;
		Счетчик = 0;
		Пока Счетчик<1000000 Цикл
			Счетчик	= Счетчик+1;
		КонецЦикла;
		Продолжить;

		//ну тут обработка чего бы то нибыло
		СтрокаТаб = ТабЗн.Добавить();
	КонецЦикла;	
	Описание = "Ещё чуть чуть";
	ДлительныеОперации.СообщитьПрогресс(99, Описание);
	Возврат ТабЗн;	
КонецФункции



// +++ Функция. Громов Алексей. 19.05.2021
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПолучитьОстаткиПереданныхНаКомиссию(ПараметрыНастройки) Экспорт
	ПараметрыПодключенияERP = Новый Структура("АдресВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ",
		ПараметрыНастройки.АдресСервераERP,
		ПараметрыНастройки.ПользовательERP,
		ПараметрыНастройки.ПарольERP);
		
	Соединение  = ПодключениеКВнешнейИБ(ПараметрыПодключенияERP);
	Если Соединение = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Соединение не установлено!");
		Возврат Неопределено;
	КонецЕсли;
	
	GUIDСоглашения	= "";
	
	Если Не СоглашениеСКлиентом.Пустая()Тогда
		
		GUIDСоглашения	= СоглашениеСКлиентом.УникальныйИдентификатор();
	Иначе
		//Вот Сдесь  будемполучать массив но как нить в другой раз
		//Мне ведь не нужно только отобранные соглашения мне нужно партии к ним подтянуть
		
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("ЭтоОстаткиКомиссии,ДатаФормированияОстатков,Соглашение",
			Истина,
			ТекущаяДата(),
			GUIDСоглашения);
	
	//1. Получим ТЗСОстаткамиПоКоличеству 	
		Ответ = Соединение.ОстаткиПереданныхНаКомиссию(Новый ХранилищеЗначения(ПараметрыМетода, Новый СжатиеДанных(9))).Получить();
		
		Возврат Ответ;
КонецФункции



// +++ Функция. Громов Алексей. 19.05.2021
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПолучитьНаборыДопов(ПараметрыНастройки) Экспорт
	ПараметрыПодключенияERP = Новый Структура("АдресВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ",
		ПараметрыНастройки.АдресСервераERP,
		ПараметрыНастройки.ПользовательERP,
		ПараметрыНастройки.ПарольERP);
		
	Соединение  = ПодключениеКВнешнейИБ(ПараметрыПодключенияERP);
	Если Соединение = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Соединение не установлено!");
		Возврат Неопределено;
	КонецЕсли;
	
			Ответ = Соединение.ПолучитьДанныеНаборов().Получить();
		
		Возврат Ответ;
КонецФункции

// +++ Функция. Громов Алексей. 19.05.2021
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПолучитьОстаткиТоваровПоСкладу(ПараметрыНастройки) Экспорт
	ПараметрыПодключенияERP = Новый Структура("АдресВнешнейИБ, ПользовательВнешнейИБ, ПарольВнешнейИБ",
		ПараметрыНастройки.АдресСервераERP,
		ПараметрыНастройки.ПользовательERP,
		ПараметрыНастройки.ПарольERP);
		
	Соединение  = ПодключениеКВнешнейИБ(ПараметрыПодключенияERP);
	Если Соединение = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Соединение не установлено!");
		Возврат Неопределено;
	КонецЕсли;
	
	GUIDСоглашения	= "";
	
	Если Не СоглашениеСКлиентом.Пустая()Тогда
		
		GUIDСоглашения	= СоглашениеСКлиентом.УникальныйИдентификатор();
	Иначе
		//Вот Сдесь  будемполучать массив но как нить в другой раз
		//Мне ведь не нужно только отобранные соглашения мне нужно партии к ним подтянуть
		
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("ЭтоОстаткиКомиссии,ДатаФормированияОстатков,Соглашение",
			Истина,
			ТекущаяДата(),
			GUIDСоглашения);
	
	//1. Получим ТЗСОстаткамиПоКоличеству 	
		Ответ = Соединение.ОстаткиПереданныхНаКомиссию(Новый ХранилищеЗначения(ПараметрыМетода, Новый СжатиеДанных(9))).Получить();
		
		Возврат Ответ;
КонецФункции



#Область Прочее




////////////////////////////////////////////////////////////////////////////////////////////////
//







//ПодключениеКВнешнейИБ - Функция подключения к серверу с использованием механизмов ADO DB
//Параметры:
//	ПараметрыПодключения - тип Структура("ИмяСервера,ИмяПользователя,Пароль,ИмяБазы,СтрокаПодключения")
//			ИмяСервера			- имя SQL-сервера
//			ИмяПользователя		- Имя пользователя (sa или другой)
//			Пароль				- Пароль пользователя
//			ИмяБазы				- Имя базы данных
//			СтрокаПодключения	- (необязательный параметр) можно передать готовую строку подключения, 
//									если пустая тогда подключение по параметрам
Функция ПодключениеКВнешнейИБ(ПараметрыПодключения)
	
	Перем Прокси;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Адрес = ПараметрыПодключения.АдресВнешнейИБ;
	
	Пользователь = ПараметрыПодключения.ПользовательВнешнейИБ;
	Пароль       = ПараметрыПодключения.ПарольВнешнейИБ;
	
	Попытка
		
		Определения = Новый WSОпределения(Адрес, Пользователь, Пароль); 
	
		Прокси = Новый WSПрокси(Определения, "SyncERP", "SyncERP", "SyncERP" + "Soap",,, );
		Прокси.Пользователь	= Пользователь;
		Прокси.Пароль		= Пароль;
	Исключение
	
	КонецПопытки;
	
	Возврат Прокси;
	
КонецФункции // ПодключениеКВнешнейИБ

// +++ Функция.  10.05.2021
//
// Параметры:
//
// Возвращаемое значение:
//
Функция ПодключитьSQL(ПараметрыПодключения) 
	
	СтрокаПодключения = "Driver={SQL Server};Server="+ПараметрыПодключения.ИмяСервераSQL+";Uid="+ПараметрыПодключения.ПользовательSQL+";Pwd="+ПараметрыПодключения.ПарольSQL+";DataBase="+ПараметрыПодключения.ИмяНовойБазыERP+";";
	
	Попытка
		Connection                   = Новый COMОбъект("ADODB.Connection");
		Connection.ConnectionString  = СтрокаПодключения;
		Connection.ConnectionTimeOut = 0;
		Connection.CommandTimeOut    = 0;
	    Connection.Open();	
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
		Возврат Неопределено;
	КонецПопытки;

	Возврат Connection;
	
КонецФункции	





	
	
#КонецОбласти 


